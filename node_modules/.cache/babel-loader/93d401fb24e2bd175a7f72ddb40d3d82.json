{"ast":null,"code":"import { GET_POKEMONS, GET_POKEMON_BY_NAME, GET_TYPES, FILTER_BY_TYPE, FILTER_BY_ORIGIN, ORDER_BY_NAME, ORDER_BY_ATTACK, GET_DETAIL, RESET_DETAIL, POST_POKEMON, RELOAD_POKEMONS } from '../actions/names';\nconst initial_state = {\n  pokemons: [],\n  all_pokemons: [],\n  types: [],\n  detail: {}\n};\n\nfunction reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial_state;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  //el swhitch toma la constatante que va a ir cambiando en este caso action.type\n  //explicacion del swhich: \n  //si por ejemplo nosotros tenemos una variable y esa variable se llama nombre que se va a ir cambiando\n  //algo asi switch(nombre)\n  // y nosotros queremos generar acciones a partir de ese nombre\n  // y en el caso de que ese nombre sea \n  // case \"enzo\":\n  // nosotros retornamos una accion. Ejemplo console.log(Aprobame XD)\n  // y asi nosotros podemos ir teniendo muchos casos y retornar acciones distintas \n  switch (action.type) {\n    case FILTER_BY_ORIGIN:\n      let pokemons_filtered_by_origin;\n\n      if (action.payload === \"DB\") {\n        pokemons_filtered_by_origin = state.all_pokemons.filter(poke => poke.hasOwnProperty(\"create\"));\n\n        if (pokemons_filtered_by_origin.length === 0) {\n          pokemons_filtered_by_origin = [\"No hay pokemon en la db\"];\n        }\n      } else if (action.payload === \"API\") {\n        pokemons_filtered_by_origin = state.all_pokemons.filter(poke => !poke.hasOwnProperty(\"create\"));\n      } else {\n        pokemons_filtered_by_origin = state.all_pokemons;\n      }\n\n      return { ...state,\n        pokemons: pokemons_filtered_by_origin\n      };\n\n    case FILTER_BY_TYPE:\n      let pokemons_filtered_by_type;\n\n      if (action.payload === \"All\") {\n        pokemons_filtered_by_type = state.all_pokemons;\n      } else {\n        pokemons_filtered_by_type = state.all_pokemons.filter(poke => poke.types.includes(action.payload));\n      }\n\n      if (pokemons_filtered_by_type.length === 0) {\n        pokemons_filtered_by_type = [\"No hay pokemons de ese tipo \"];\n      }\n\n      return { ...state,\n        pokemons: pokemons_filtered_by_type\n      };\n\n    case GET_DETAIL:\n      return { ...state,\n        detail: action.payload\n      };\n\n    case GET_POKEMONS:\n      return { // le digo que copie la informacion de su data del estado inicial \n        ...state,\n        //le digo que ese array pokemons va a ser igual a lo que esta en payload\n        pokemons: action.payload,\n        all_pokemons: action.payload\n      };\n\n    case GET_POKEMON_BY_NAME:\n      if (action.payload.length === 0) {\n        state.pokemons = [\"El Pokemon No Existe\"];\n      } else {\n        state.pokemons = action.payload;\n      }\n\n      return { ...state\n      };\n\n    case GET_TYPES:\n      return { ...state,\n        types: action.payload\n      };\n\n    case ORDER_BY_ATTACK:\n      let pokemons_ordered_by_attack;\n\n      if (action.payload === \"ASC\") {\n        pokemons_ordered_by_attack = state.pokemons.sort((a, b) => {\n          if (a.attack > b.attack) return 1;\n          if (a.attack < b.attack) return -1;\n          return 0;\n        });\n      } else if (action.payload === \"DESC\") {\n        pokemons_ordered_by_attack = state.pokemons.sort((a, b) => {\n          if (a.attack > b.attack) return -1;\n          if (a.attack < b.attack) return 1;\n          return 0;\n        });\n      } else {\n        pokemons_ordered_by_attack = state.all_pokemons;\n      }\n\n      return { ...state,\n        pokemons: pokemons_ordered_by_attack\n      };\n\n    case ORDER_BY_NAME:\n      let pokemons_ordered_by_name;\n\n      if (action.payload === \"ASC\") {\n        pokemons_ordered_by_name = state.pokemons.sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        });\n      } else if (action.payload === \"DESC\") {\n        pokemons_ordered_by_name = state.pokemons.sort((a, b) => {\n          if (a.name > b.name) return -1;\n          if (a.name < b.name) return 1;\n          return 0;\n        });\n      } else {\n        pokemons_ordered_by_name = state.all_pokemons;\n      }\n\n      return { ...state,\n        pokemons: pokemons_ordered_by_name\n      };\n\n    case POST_POKEMON:\n      return { ...state\n      };\n\n    case RELOAD_POKEMONS:\n      return { ...state,\n        pokemons: state.original_pokemons,\n        all_pokemons: state.original_pokemons\n      };\n\n    case RESET_DETAIL:\n      return { ...state,\n        detail: {}\n      };\n    //en caso de que ninguna condicion sea mandada reroena el estado sin cambios\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/inova/Desktop/Deploy/FrontPiPokemon/src/redux/reducer/index.js"],"names":["GET_POKEMONS","GET_POKEMON_BY_NAME","GET_TYPES","FILTER_BY_TYPE","FILTER_BY_ORIGIN","ORDER_BY_NAME","ORDER_BY_ATTACK","GET_DETAIL","RESET_DETAIL","POST_POKEMON","RELOAD_POKEMONS","initial_state","pokemons","all_pokemons","types","detail","reducer","state","action","type","pokemons_filtered_by_origin","payload","filter","poke","hasOwnProperty","length","pokemons_filtered_by_type","includes","pokemons_ordered_by_attack","sort","a","b","attack","pokemons_ordered_by_name","name","original_pokemons"],"mappings":"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","sourcesContent":["import {GET_POKEMONS, GET_POKEMON_BY_NAME, GET_TYPES, FILTER_BY_TYPE, FILTER_BY_ORIGIN, ORDER_BY_NAME, ORDER_BY_ATTACK,\r\nGET_DETAIL, RESET_DETAIL, POST_POKEMON, RELOAD_POKEMONS} from '../actions/names';\r\n\r\nconst initial_state = {\r\n    pokemons: [],\r\n    all_pokemons: [],\r\n    types: [],\r\n    detail: {}\r\n}; \r\n\r\nfunction reducer(state = initial_state, action){\r\n //el swhitch toma la constatante que va a ir cambiando en este caso action.type\r\n //explicacion del swhich: \r\n //si por ejemplo nosotros tenemos una variable y esa variable se llama nombre que se va a ir cambiando\r\n //algo asi switch(nombre)\r\n// y nosotros queremos generar acciones a partir de ese nombre\r\n// y en el caso de que ese nombre sea \r\n// case \"enzo\":\r\n// nosotros retornamos una accion. Ejemplo console.log(Aprobame XD)\r\n// y asi nosotros podemos ir teniendo muchos casos y retornar acciones distintas \r\n    switch (action.type) {\r\n\r\n        case FILTER_BY_ORIGIN:\r\n            let pokemons_filtered_by_origin;\r\n            if(action.payload === \"DB\"){\r\n                pokemons_filtered_by_origin = state.all_pokemons.filter( poke => poke.hasOwnProperty(\"create\"));\r\n                if(pokemons_filtered_by_origin.length === 0){\r\n                    pokemons_filtered_by_origin = [\"No hay pokemon en la db\"];\r\n                }\r\n            }else if(action.payload === \"API\"){\r\n                pokemons_filtered_by_origin = state.all_pokemons.filter( poke => !poke.hasOwnProperty(\"create\"));\r\n            }else{\r\n                pokemons_filtered_by_origin = state.all_pokemons;\r\n            }\r\n            return {\r\n                ...state,\r\n                pokemons: pokemons_filtered_by_origin\r\n            }\r\n        \r\n        case FILTER_BY_TYPE:\r\n            let pokemons_filtered_by_type;\r\n            if(action.payload === \"All\"){\r\n                pokemons_filtered_by_type = state.all_pokemons;\r\n            }else{\r\n                pokemons_filtered_by_type = state.all_pokemons.filter( poke => poke.types.includes(action.payload));\r\n            }\r\n            if(pokemons_filtered_by_type.length === 0){\r\n                pokemons_filtered_by_type = [\"No hay pokemons de ese tipo \"];\r\n            }\r\n            return {\r\n                ...state,\r\n                pokemons: pokemons_filtered_by_type\r\n            }\r\n\r\n        case GET_DETAIL:\r\n            return {\r\n                ...state,\r\n                detail: action.payload\r\n            }\r\n\r\n        case GET_POKEMONS:\r\n            return {\r\n                // le digo que copie la informacion de su data del estado inicial \r\n\r\n                ...state,\r\n                //le digo que ese array pokemons va a ser igual a lo que esta en payload\r\n                pokemons: action.payload,\r\n                all_pokemons: action.payload\r\n            }\r\n\r\n        case GET_POKEMON_BY_NAME:\r\n            if(action.payload.length === 0) {\r\n                state.pokemons = [\"El Pokemon No Existe\"]\r\n            }else{\r\n                state.pokemons = action.payload\r\n            }\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case GET_TYPES:\r\n            return {\r\n                ...state,\r\n                types: action.payload\r\n            }\r\n\r\n        case ORDER_BY_ATTACK:\r\n            let pokemons_ordered_by_attack;\r\n            if(action.payload === \"ASC\"){\r\n                pokemons_ordered_by_attack = state.pokemons.sort((a, b) => {\r\n                    if(a.attack > b.attack) return 1;\r\n                    if(a.attack < b.attack) return -1;\r\n                    return 0;\r\n                });\r\n            }else if(action.payload === \"DESC\"){\r\n                pokemons_ordered_by_attack = state.pokemons.sort((a, b) => {\r\n                    if(a.attack > b.attack) return -1;\r\n                    if(a.attack < b.attack) return 1;\r\n                    return 0;\r\n                });\r\n            }else{\r\n                pokemons_ordered_by_attack = state.all_pokemons\r\n            }\r\n            return {\r\n                ...state,\r\n                pokemons: pokemons_ordered_by_attack\r\n            }\r\n            \r\n        case ORDER_BY_NAME:\r\n            let pokemons_ordered_by_name;\r\n            if(action.payload === \"ASC\"){\r\n                pokemons_ordered_by_name = state.pokemons.sort((a, b) => {\r\n                    if(a.name > b.name) return 1;\r\n                    if(a.name < b.name) return -1;\r\n                    return 0;\r\n                });\r\n            }else if(action.payload === \"DESC\"){\r\n                pokemons_ordered_by_name = state.pokemons.sort((a, b) => {\r\n                    if(a.name > b.name) return -1;\r\n                    if(a.name < b.name) return 1;\r\n                    return 0;\r\n                });\r\n            }else{\r\n                pokemons_ordered_by_name = state.all_pokemons\r\n            }\r\n            return {\r\n                ...state,\r\n                pokemons: pokemons_ordered_by_name\r\n            }\r\n        \r\n        case POST_POKEMON:\r\n            \r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case RELOAD_POKEMONS:\r\n            return {\r\n                ...state,\r\n                pokemons: state.original_pokemons,\r\n                all_pokemons: state.original_pokemons\r\n            }\r\n\r\n        case RESET_DETAIL:\r\n            return {\r\n                ...state,\r\n                detail: {}\r\n            }\r\n            //en caso de que ninguna condicion sea mandada reroena el estado sin cambios\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}